apiVersion: v1
data:
  conf: "<?php\n\nif( !defined( 'DVWA_WEB_PAGE_TO_ROOT' ) ) {\n\tdie( 'DVWA System
    error- WEB_PAGE_TO_ROOT undefined' );\n\texit;\n}\n\nif (!file_exists(DVWA_WEB_PAGE_TO_ROOT
    . 'config/config.inc.php')) {\n\tdie (\"DVWA System error - config file not found.
    Copy config/config.inc.php.dist to config/config.inc.php and configure to your
    environment.\");\n}\n\n// Include configs\nrequire_once DVWA_WEB_PAGE_TO_ROOT
    . 'config/config.inc.php';\n\n// Declare the $html variable\nif( !isset( $html
    ) ) {\n\t$html = \"\";\n}\n\n// Valid security levels\n$security_levels = array('low',
    'medium', 'high', 'impossible');\nif( !isset( $_COOKIE[ 'security' ] ) || !in_array(
    $_COOKIE[ 'security' ], $security_levels ) ) {\n\t// Set security cookie to impossible
    if no cookie exists\n\tif( in_array( $_DVWA[ 'default_security_level' ], $security_levels)
    ) {\n\t\tdvwaSecurityLevelSet( $_DVWA[ 'default_security_level' ] );\n\t} else
    {\n\t\tdvwaSecurityLevelSet( 'impossible' );\n\t}\n\t// If the cookie wasn't set
    then the session flags need updating.\n\tdvwa_start_session();\n}\n\n/*\n * This
    function is called after login and when you change the security level.\n * It
    gets the security level and sets the httponly and samesite cookie flags\n * appropriately.\n
    * You can only change the flags by calling session_regenerate_id(), just\n * setting
    them and doing a session_start() does not change anything.\n * session_regenerate_id()
    keeps the existing session values, so nothing is lost\n * it just causes a new
    Set-Cookie header to be sent with the new right flags.\n*/\n\nfunction dvwa_start_session()
    {\n\t// This will setup the session cookie based on\n\t// the security level.\n\n\t$security_level
    = dvwaSecurityLevelGet();\n\tif ($security_level == 'impossible') {\n\t\t$httponly
    = true;\n\t\t$samesite = \"Strict\";\n\t}\n\telse {\n\t\t$httponly = false;\n\t\t$samesite
    = \"\";\n\t}\n\n\t$maxlifetime = 86400;\n\t$secure = false;\n\t$domain = parse_url($_SERVER['HTTP_HOST'],
    PHP_URL_HOST);\n\n\t/*\n\t * Need to do this as you can't update the settings
    of a session\n\t * while it is open. So check if one is open, close it if needed\n\t
    * then update the values and start it again.\n\t*/\n\n\tif (session_id()) {\n\t\tsession_write_close();\n\t}\n\n\tsession_set_cookie_params([\n\t\t'lifetime'
    => $maxlifetime,\n\t\t'path' => '/',\n\t\t'domain' => $domain,\n\t\t'secure' =>
    $secure,\n\t\t'httponly' => $httponly,\n\t\t'samesite' => $samesite\n\t]);\n\n\tsession_start();\n\n\t//
    This is the call that will force a new Set-Cookie header with the right flags\n\tsession_regenerate_id();\n}\n\nif
    (array_key_exists (\"Login\", $_POST) && $_POST['Login'] == \"Login\") {\n\tdvwa_start_session();\n}
    else {\n\tif (!session_id()) {\n\t\tsession_start();\n\t}\n}\n\nif (!array_key_exists
    (\"default_locale\", $_DVWA)) {\n\t$_DVWA[ 'default_locale' ] = \"en\";\n}\n\ndvwaLocaleSet(
    $_DVWA[ 'default_locale' ] );\n\n// Start session functions --\n\nfunction &dvwaSessionGrab()
    {\n\tif( !isset( $_SESSION[ 'dvwa' ] ) ) {\n\t\t$_SESSION[ 'dvwa' ] = array();\n\t}\n\treturn
    $_SESSION[ 'dvwa' ];\n}\n\n\nfunction dvwaPageStartup( $pActions ) {\n\tif (in_array('authenticated',
    $pActions)) {\n\t\tif( !dvwaIsLoggedIn()) {\n\t\t\tdvwaRedirect( DVWA_WEB_PAGE_TO_ROOT
    . 'login.php' );\n\t\t}\n\t}\n}\n\nfunction dvwaLogin( $pUsername ) {\n\t$dvwaSession
    =& dvwaSessionGrab();\n\t$dvwaSession[ 'username' ] = $pUsername;\n}\n\n\nfunction
    dvwaIsLoggedIn() {\n\tglobal $_DVWA;\n\n\tif (in_array(\"disable_authentication\",
    $_DVWA) && $_DVWA['disable_authentication']) {\n\t\treturn true;\n\t}\n\t$dvwaSession
    =& dvwaSessionGrab();\n\treturn isset( $dvwaSession[ 'username' ] );\n}\n\n\nfunction
    dvwaLogout() {\n\t$dvwaSession =& dvwaSessionGrab();\n\tunset( $dvwaSession[ 'username'
    ] );\n}\n\n\nfunction dvwaPageReload() {\n\tif  ( array_key_exists( 'HTTP_X_FORWARDED_PREFIX'
    , $_SERVER )) {\n\t\tdvwaRedirect( $_SERVER[ 'HTTP_X_FORWARDED_PREFIX' ] . $_SERVER[
    'PHP_SELF' ] );\n\t}\n\telse {\n\t\tdvwaRedirect( $_SERVER[ 'PHP_SELF' ] );\n\t}\n}\n\nfunction
    dvwaCurrentUser() {\n\t$dvwaSession =& dvwaSessionGrab();\n\treturn ( isset( $dvwaSession[
    'username' ]) ? $dvwaSession[ 'username' ] : 'Unknown') ;\n}\n\n// -- END (Session
    functions)\n\nfunction &dvwaPageNewGrab() {\n\t$returnArray = array(\n\t\t'title'
    \          => 'Damn Vulnerable Web Application (DVWA)',\n\t\t'title_separator'
    => ' :: ',\n\t\t'body'            => '',\n\t\t'page_id'         => '',\n\t\t'help_button'
    \    => '',\n\t\t'source_button'   => '',\n\t);\n\treturn $returnArray;\n}\n\n\nfunction
    dvwaSecurityLevelGet() {\n\tglobal $_DVWA;\n\n\t// If there is a security cookie,
    that takes priority.\n\tif (isset($_COOKIE['security'])) {\n\t\treturn $_COOKIE[
    'security' ];\n\t}\n\n\t// If not, check to see if authentication is disabled,
    if it is, use\n\t// the default security level.\n\tif (in_array(\"disable_authentication\",
    $_DVWA) && $_DVWA['disable_authentication']) {\n\t\treturn $_DVWA[ 'default_security_level'
    ];\n\t}\n\n\t// Worse case, set the level to impossible.\n\treturn 'impossible';\n}\n\n\nfunction
    dvwaSecurityLevelSet( $pSecurityLevel ) {\n\tif( $pSecurityLevel == 'impossible'
    ) {\n\t\t$httponly = true;\n\t}\n\telse {\n\t\t$httponly = false;\n\t}\n\n\tsetcookie(
    'security', $pSecurityLevel, 0, \"/\", \"\", false, $httponly );\n\t$_COOKIE['security']
    = $pSecurityLevel;\n}\n\nfunction dvwaLocaleGet() {\t\n\t$dvwaSession =& dvwaSessionGrab();\n\treturn
    $dvwaSession[ 'locale' ];\n}\n\nfunction dvwaSQLiDBGet() {\n\tglobal $_DVWA;\n\treturn
    $_DVWA['SQLI_DB'];\n}\n\nfunction dvwaLocaleSet( $pLocale ) {\n\t$dvwaSession
    =& dvwaSessionGrab();\n\t$locales = array('en', 'zh');\n\tif( in_array( $pLocale,
    $locales) ) {\n\t\t$dvwaSession[ 'locale' ] = $pLocale;\n\t} else {\n\t\t$dvwaSession[
    'locale' ] = 'en';\n\t}\n}\n\n// Start message functions --\n\nfunction dvwaMessagePush(
    $pMessage ) {\n\t$dvwaSession =& dvwaSessionGrab();\n\tif( !isset( $dvwaSession[
    'messages' ] ) ) {\n\t\t$dvwaSession[ 'messages' ] = array();\n\t}\n\t$dvwaSession[
    'messages' ][] = $pMessage;\n}\n\n\nfunction dvwaMessagePop() {\n\t$dvwaSession
    =& dvwaSessionGrab();\n\tif( !isset( $dvwaSession[ 'messages' ] ) || count( $dvwaSession[
    'messages' ] ) == 0 ) {\n\t\treturn false;\n\t}\n\treturn array_shift( $dvwaSession[
    'messages' ] );\n}\n\n\nfunction messagesPopAllToHtml() {\n\t$messagesHtml = '';\n\twhile(
    $message = dvwaMessagePop() ) {   // TODO- sharpen!\n\t\t$messagesHtml .= \"<div
    class=\\\"message\\\">{$message}</div>\";\n\t}\n\n\treturn $messagesHtml;\n}\n\n//
    --END (message functions)\n\nfunction dvwaHtmlEcho( $pPage ) {\n\t$menuBlocks
    = array();\n\n\t$menuBlocks[ 'home' ] = array();\n\tif( dvwaIsLoggedIn() ) {\n\t\t$menuBlocks[
    'home' ][] = array( 'id' => 'home', 'name' => 'Home', 'url' => '.' );\n\t\t$menuBlocks[
    'home' ][] = array( 'id' => 'instructions', 'name' => 'Instructions', 'url' =>
    'instructions.php' );\n\t\t$menuBlocks[ 'home' ][] = array( 'id' => 'setup', 'name'
    => 'Setup / Reset DB', 'url' => 'setup.php' );\n\t}\n\telse {\n\t\t$menuBlocks[
    'home' ][] = array( 'id' => 'setup', 'name' => 'Setup DVWA', 'url' => 'setup.php'
    );\n\t\t$menuBlocks[ 'home' ][] = array( 'id' => 'instructions', 'name' => 'Instructions',
    'url' => 'instructions.php' );\n\t}\n\n\tif( dvwaIsLoggedIn() ) {\n\t\t$menuBlocks[
    'vulnerabilities' ] = array();\n\t\t$menuBlocks[ 'vulnerabilities' ][] = array(
    'id' => 'brute', 'name' => 'Brute Force', 'url' => 'vulnerabilities/brute/' );\n\t\t$menuBlocks[
    'vulnerabilities' ][] = array( 'id' => 'exec', 'name' => 'Command Injection',
    'url' => 'vulnerabilities/exec/' );\n\t\t$menuBlocks[ 'vulnerabilities' ][] =
    array( 'id' => 'csrf', 'name' => 'CSRF', 'url' => 'vulnerabilities/csrf/' );\n\t\t$menuBlocks[
    'vulnerabilities' ][] = array( 'id' => 'fi', 'name' => 'File Inclusion', 'url'
    => 'vulnerabilities/fi/.?page=include.php' );\n\t\t$menuBlocks[ 'vulnerabilities'
    ][] = array( 'id' => 'upload', 'name' => 'File Upload', 'url' => 'vulnerabilities/upload/'
    );\n\t\t$menuBlocks[ 'vulnerabilities' ][] = array( 'id' => 'captcha', 'name'
    => 'Insecure CAPTCHA', 'url' => 'vulnerabilities/captcha/' );\n\t\t$menuBlocks[
    'vulnerabilities' ][] = array( 'id' => 'sqli', 'name' => 'SQL Injection', 'url'
    => 'vulnerabilities/sqli/' );\n\t\t$menuBlocks[ 'vulnerabilities' ][] = array(
    'id' => 'sqli_blind', 'name' => 'SQL Injection (Blind)', 'url' => 'vulnerabilities/sqli_blind/'
    );\n\t\t$menuBlocks[ 'vulnerabilities' ][] = array( 'id' => 'weak_id', 'name'
    => 'Weak Session IDs', 'url' => 'vulnerabilities/weak_id/' );\n\t\t$menuBlocks[
    'vulnerabilities' ][] = array( 'id' => 'xss_d', 'name' => 'XSS (DOM)', 'url' =>
    'vulnerabilities/xss_d/' );\n\t\t$menuBlocks[ 'vulnerabilities' ][] = array( 'id'
    => 'xss_r', 'name' => 'XSS (Reflected)', 'url' => 'vulnerabilities/xss_r/' );\n\t\t$menuBlocks[
    'vulnerabilities' ][] = array( 'id' => 'xss_s', 'name' => 'XSS (Stored)', 'url'
    => 'vulnerabilities/xss_s/' );\n\t\t$menuBlocks[ 'vulnerabilities' ][] = array(
    'id' => 'csp', 'name' => 'CSP Bypass', 'url' => 'vulnerabilities/csp/' );\n\t\t$menuBlocks[
    'vulnerabilities' ][] = array( 'id' => 'javascript', 'name' => 'JavaScript', 'url'
    => 'vulnerabilities/javascript/' );\n\t\tif (dvwaCurrentUser() == \"admin\") {\n\t\t\t$menuBlocks[
    'vulnerabilities' ][] = array( 'id' => 'authbypass', 'name' => 'Authorisation
    Bypass', 'url' => 'vulnerabilities/authbypass/' );\n\t\t}\n\t\t$menuBlocks[ 'vulnerabilities'
    ][] = array( 'id' => 'open_redirect', 'name' => 'Open HTTP Redirect', 'url' =>
    'vulnerabilities/open_redirect/' );\n\t}\n\n\t$menuBlocks[ 'meta' ] = array();\n\tif(
    dvwaIsLoggedIn() ) {\n\t\t$menuBlocks[ 'meta' ][] = array( 'id' => 'security',
    'name' => 'DVWA Security', 'url' => 'security.php' );\n\t\t$menuBlocks[ 'meta'
    ][] = array( 'id' => 'phpinfo', 'name' => 'PHP Info', 'url' => 'phpinfo.php' );\n\t}\n\t$menuBlocks[
    'meta' ][] = array( 'id' => 'about', 'name' => 'About', 'url' => 'about.php' );\n\n\tif(
    dvwaIsLoggedIn() ) {\n\t\t$menuBlocks[ 'logout' ] = array();\n\t\t$menuBlocks[
    'logout' ][] = array( 'id' => 'logout', 'name' => 'Logout', 'url' => 'logout.php'
    );\n\t}\n\n\t$menuHtml = '';\n\n\tforeach( $menuBlocks as $menuBlock ) {\n\t\t$menuBlockHtml
    = '';\n\t\tforeach( $menuBlock as $menuItem ) {\n\t\t\t$selectedClass = ( $menuItem[
    'id' ] == $pPage[ 'page_id' ] ) ? 'selected' : '';\n\t\t\t$fixedUrl = DVWA_WEB_PAGE_TO_ROOT.$menuItem[
    'url' ];\n\t\t\t$menuBlockHtml .= \"<li class=\\\"{$selectedClass}\\\"><a href=\\\"{$fixedUrl}\\\">{$menuItem[
    'name' ]}</a></li>\\n\";\n\t\t}\n\t\t$menuHtml .= \"<ul class=\\\"menuBlocks\\\">{$menuBlockHtml}</ul>\";\n\t}\n\n\t//
    Get security cookie --\n\t$securityLevelHtml = '';\n\tswitch( dvwaSecurityLevelGet()
    ) {\n\t\tcase 'low':\n\t\t\t$securityLevelHtml = 'low';\n\t\t\tbreak;\n\t\tcase
    'medium':\n\t\t\t$securityLevelHtml = 'medium';\n\t\t\tbreak;\n\t\tcase 'high':\n\t\t\t$securityLevelHtml
    = 'high';\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t$securityLevelHtml = 'impossible';\n\t\t\tbreak;\n\t}\n\t//
    -- END (security cookie)\n\n\t$userInfoHtml = '<em>Username:</em> ' . ( dvwaCurrentUser()
    );\n\t$securityLevelHtml = \"<em>Security Level:</em> {$securityLevelHtml}\";\n\t$localeHtml
    = '<em>Locale:</em> ' . ( dvwaLocaleGet() );\n\t$sqliDbHtml = '<em>SQLi DB:</em>
    ' . ( dvwaSQLiDBGet() );\n\t\n\n\t$messagesHtml = messagesPopAllToHtml();\n\tif(
    $messagesHtml ) {\n\t\t$messagesHtml = \"<div class=\\\"body_padded\\\">{$messagesHtml}</div>\";\n\t}\n\n\t$systemInfoHtml
    = \"\";\n\tif( dvwaIsLoggedIn() ) \n\t\t$systemInfoHtml = \"<div align=\\\"left\\\">{$userInfoHtml}<br
    />{$securityLevelHtml}<br />{$localeHtml}<br />{$sqliDbHtml}</div>\";\n\tif( $pPage[
    'source_button' ] ) {\n\t\t$systemInfoHtml = dvwaButtonSourceHtmlGet( $pPage[
    'source_button' ] ) . \" $systemInfoHtml\";\n\t}\n\tif( $pPage[ 'help_button'
    ] ) {\n\t\t$systemInfoHtml = dvwaButtonHelpHtmlGet( $pPage[ 'help_button' ] )
    . \" $systemInfoHtml\";\n\t}\n\n\t// Send Headers + main HTML code\n\tHeader(
    'Cache-Control: no-cache, must-revalidate');   // HTTP/1.1\n\tHeader( 'Content-Type:
    text/html;charset=utf-8' );     // TODO- proper XHTML headers...\n\tHeader( 'Expires:
    Tue, 23 Jun 2009 12:00:00 GMT' );    // Date in the past\n\n\techo \"<!DOCTYPE
    html>\n\n<html lang=\\\"en-GB\\\">\n\n\t<head>\n\t\t<meta http-equiv=\\\"Content-Type\\\"
    content=\\\"text/html; charset=UTF-8\\\" />\n\n\t\t<title>{$pPage[ 'title' ]}</title>\n\n\t\t<link
    rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"\" . DVWA_WEB_PAGE_TO_ROOT
    . \"dvwa/css/main.css\\\" />\n\n\t\t<link rel=\\\"icon\\\" type=\\\"\\image/ico\\\"
    href=\\\"\" . DVWA_WEB_PAGE_TO_ROOT . \"favicon.ico\\\" />\n\n\t\t<script type=\\\"text/javascript\\\"
    src=\\\"\" . DVWA_WEB_PAGE_TO_ROOT . \"dvwa/js/dvwaPage.js\\\"></script>\n\n\t</head>\n\n\t<body
    class=\\\"home\\\">\n\t\t<div id=\\\"container\\\">\n\n\t\t\t<div id=\\\"header\\\">\n\n\t\t\t\t<img
    src=\\\"\" . DVWA_WEB_PAGE_TO_ROOT . \"dvwa/images/logo.png\\\" alt=\\\"Damn Vulnerable
    Web Application\\\" />\n\n\t\t\t</div>\n\n\t\t\t<div id=\\\"main_menu\\\">\n\n\t\t\t\t<div
    id=\\\"main_menu_padded\\\">\n\t\t\t\t{$menuHtml}\n\t\t\t\t</div>\n\n\t\t\t</div>\n\n\t\t\t<div
    id=\\\"main_body\\\">\n\n\t\t\t\t{$pPage[ 'body' ]}\n\t\t\t\t<br /><br />\n\t\t\t\t{$messagesHtml}\n\n\t\t\t</div>\n\n\t\t\t<div
    class=\\\"clear\\\">\n\t\t\t</div>\n\n\t\t\t<div id=\\\"system_info\\\">\n\t\t\t\t{$systemInfoHtml}\n\t\t\t</div>\n\n\t\t\t<div
    id=\\\"footer\\\">\n\n\t\t\t\t<p>Damn Vulnerable Web Application (DVWA)</p>\n\t\t\t\t<script
    src='\" . DVWA_WEB_PAGE_TO_ROOT . \"dvwa/js/add_event_listeners.js'></script>\n\n\t\t\t</div>\n\n\t\t</div>\n\n\t</body>\n\n</html>\";\n}\n\n\nfunction
    dvwaHelpHtmlEcho( $pPage ) {\n\t// Send Headers\n\tHeader( 'Cache-Control: no-cache,
    must-revalidate');   // HTTP/1.1\n\tHeader( 'Content-Type: text/html;charset=utf-8'
    );     // TODO- proper XHTML headers...\n\tHeader( 'Expires: Tue, 23 Jun 2009
    12:00:00 GMT' );    // Date in the past\n\n\techo \"<!DOCTYPE html>\n\n<html lang=\\\"en-GB\\\">\n\n\t<head>\n\n\t\t<meta
    http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=UTF-8\\\" />\n\n\t\t<title>{$pPage[
    'title' ]}</title>\n\n\t\t<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"\"
    . DVWA_WEB_PAGE_TO_ROOT . \"dvwa/css/help.css\\\" />\n\n\t\t<link rel=\\\"icon\\\"
    type=\\\"\\image/ico\\\" href=\\\"\" . DVWA_WEB_PAGE_TO_ROOT . \"favicon.ico\\\"
    />\n\n\t</head>\n\n\t<body>\n\n\t<div id=\\\"container\\\">\n\n\t\t\t{$pPage[
    'body' ]}\n\n\t\t</div>\n\n\t</body>\n\n</html>\";\n}\n\n\nfunction dvwaSourceHtmlEcho(
    $pPage ) {\n\t// Send Headers\n\tHeader( 'Cache-Control: no-cache, must-revalidate');
    \  // HTTP/1.1\n\tHeader( 'Content-Type: text/html;charset=utf-8' );     // TODO-
    proper XHTML headers...\n\tHeader( 'Expires: Tue, 23 Jun 2009 12:00:00 GMT' );
    \   // Date in the past\n\n\techo \"<!DOCTYPE html>\n\n<html lang=\\\"en-GB\\\">\n\n\t<head>\n\n\t\t<meta
    http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=UTF-8\\\" />\n\n\t\t<title>{$pPage[
    'title' ]}</title>\n\n\t\t<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"\"
    . DVWA_WEB_PAGE_TO_ROOT . \"dvwa/css/source.css\\\" />\n\n\t\t<link rel=\\\"icon\\\"
    type=\\\"\\image/ico\\\" href=\\\"\" . DVWA_WEB_PAGE_TO_ROOT . \"favicon.ico\\\"
    />\n\n\t</head>\n\n\t<body>\n\n\t\t<div id=\\\"container\\\">\n\n\t\t\t{$pPage[
    'body' ]}\n\n\t\t</div>\n\n\t</body>\n\n</html>\";\n}\n\n// To be used on all
    external links --\nfunction dvwaExternalLinkUrlGet( $pLink,$text=null ) {\n\tif(is_null(
    $text )) {\n\t\treturn '<a href=\"' . $pLink . '\" target=\"_blank\">' . $pLink
    . '</a>';\n\t}\n\telse {\n\t\treturn '<a href=\"' . $pLink . '\" target=\"_blank\">'
    . $text . '</a>';\n\t}\n}\n// -- END ( external links)\n\nfunction dvwaButtonHelpHtmlGet(
    $pId ) {\n\t$security = dvwaSecurityLevelGet();\n\t$locale = dvwaLocaleGet();\n\treturn
    \"<input type=\\\"button\\\" value=\\\"View Help\\\" class=\\\"popup_button\\\"
    id='help_button' data-help-url='\" . DVWA_WEB_PAGE_TO_ROOT . \"vulnerabilities/view_help.php?id={$pId}&security={$security}&locale={$locale}'
    )\\\">\";\n}\n\n\nfunction dvwaButtonSourceHtmlGet( $pId ) {\n\t$security = dvwaSecurityLevelGet();\n\treturn
    \"<input type=\\\"button\\\" value=\\\"View Source\\\" class=\\\"popup_button\\\"
    id='source_button' data-source-url='\" . DVWA_WEB_PAGE_TO_ROOT . \"vulnerabilities/view_source.php?id={$pId}&security={$security}'
    )\\\">\";\n}\n\n\n// Database Management --\n\nif( $DBMS == 'MySQL' ) {\n\t$DBMS
    = htmlspecialchars(strip_tags( $DBMS ));\n}\nelseif( $DBMS == 'PGSQL' ) {\n\t$DBMS
    = htmlspecialchars(strip_tags( $DBMS ));\n}\nelse {\n\t$DBMS = \"No DBMS selected.\";\n}\n\nfunction
    dvwaDatabaseConnect() {\n\tglobal $_DVWA;\n\tglobal $DBMS;\n\t//global $DBMS_connError;\n\tglobal
    $db;\n\tglobal $sqlite_db_connection;\n\n\tif( $DBMS == 'MySQL' ) {\n\t\tif( !@($GLOBALS[\"___mysqli_ston\"]
    = mysqli_connect( $_DVWA[ 'db_server' ],  $_DVWA[ 'db_user' ],  $_DVWA[ 'db_password'
    ], \"\", $_DVWA[ 'db_port' ] ))\n\t\t|| !@((bool)mysqli_query($GLOBALS[\"___mysqli_ston\"],
    \"USE \" . $_DVWA[ 'db_database' ])) ) {\n\t\t\t//die( $DBMS_connError );\n\t\t\tdvwaLogout();\n\t\t\tdvwaMessagePush(
    'Unable to connect to the database.<br />' . mysqli_error($GLOBALS[\"___mysqli_ston\"]));\n\t\t\tdvwaRedirect(
    DVWA_WEB_PAGE_TO_ROOT . 'setup.php' );\n\t\t}\n\t\t// MySQL PDO Prepared Statements
    (for impossible levels)\n\t\t$db = new PDO('mysql:host=' . $_DVWA[ 'db_server'
    ].';dbname=' . $_DVWA[ 'db_database' ].';port=' . $_DVWA['db_port'] . ';charset=utf8',
    $_DVWA[ 'db_user' ], $_DVWA[ 'db_password' ]);\n\t\t$db->setAttribute(PDO::ATTR_ERRMODE,
    PDO::ERRMODE_EXCEPTION);\n\t\t$db->setAttribute(PDO::ATTR_EMULATE_PREPARES, false);\n\t}\n\telseif(
    $DBMS == 'PGSQL' ) {\n\t\t//$dbconn = pg_connect(\"host={$_DVWA[ 'db_server' ]}
    dbname={$_DVWA[ 'db_database' ]} user={$_DVWA[ 'db_user' ]} password={$_DVWA[
    'db_password' ])}\"\n\t\t//or die( $DBMS_connError );\n\t\tdvwaMessagePush( 'PostgreSQL
    is not currently supported.' );\n\t\tdvwaPageReload();\n\t}\n\telse {\n\t\tdie
    ( \"Unknown {$DBMS} selected.\" );\n\t}\n\n\tif ($_DVWA['SQLI_DB'] == SQLITE)
    {\n\t\t$location = DVWA_WEB_PAGE_TO_ROOT . \"database/\" . $_DVWA['SQLITE_DB'];\n\t\t$sqlite_db_connection
    = new SQLite3($location);\n\t\t$sqlite_db_connection->enableExceptions(true);\n\t#\tprint
    \"sqlite db setup\";\n\t}\n}\n\n// -- END (Database Management)\n\n\nfunction
    dvwaRedirect( $pLocation ) {\n\tsession_commit();\n\theader( \"Location: {$pLocation}\"
    );\n\texit;\n}\n\n// XSS Stored guestbook function --\nfunction dvwaGuestbook()
    {\n\t$query  = \"SELECT name, comment FROM guestbook\";\n\t$result = mysqli_query($GLOBALS[\"___mysqli_ston\"],
    \ $query );\n\n\t$guestbook = '';\n\n\twhile( $row = mysqli_fetch_row( $result
    ) ) {\n\t\tif( dvwaSecurityLevelGet() == 'impossible' ) {\n\t\t\t$name    = htmlspecialchars(
    $row[0] );\n\t\t\t$comment = htmlspecialchars( $row[1] );\n\t\t}\n\t\telse {\n\t\t\t$name
    \   = $row[0];\n\t\t\t$comment = $row[1];\n\t\t}\n\n\t\t$guestbook .= \"<div id=\\\"guestbook_comments\\\">Name:
    {$name}<br />\" . \"Message: {$comment}<br /></div>\\n\";\n\t}\n\treturn $guestbook;\n}\n//
    -- END (XSS Stored guestbook)\n\n\n// Token functions --\nfunction checkToken(
    $user_token, $session_token, $returnURL ) {  # Validate the given (CSRF) token\n\tglobal
    $_DVWA;\n\n\tif (in_array(\"disable_authentication\", $_DVWA) && $_DVWA['disable_authentication'])
    {\n\t\treturn true;\n\t}\n\n\tif( $user_token !== $session_token || !isset( $session_token
    ) ) {\n\t\tdvwaMessagePush( 'CSRF token is incorrect' );\n\t\tdvwaRedirect( $returnURL
    );\n\t}\n}\n\nfunction generateSessionToken() {  # Generate a brand new (CSRF)
    token\n\tif( isset( $_SESSION[ 'session_token' ] ) ) {\n\t\tdestroySessionToken();\n\t}\n\t$_SESSION[
    'session_token' ] = md5( uniqid() );\n}\n\nfunction destroySessionToken() {  #
    Destroy any session with the name 'session_token'\n\tunset( $_SESSION[ 'session_token'
    ] );\n}\n\nfunction tokenField() {  # Return a field for the (CSRF) token\n\treturn
    \"<input type='hidden' name='user_token' value='{$_SESSION[ 'session_token' ]}'
    />\";\n}\n// -- END (Token functions)\n\n\n// Setup Functions --\n$PHPUploadPath
    \   = realpath( getcwd() . DIRECTORY_SEPARATOR . DVWA_WEB_PAGE_TO_ROOT . \"hackable\"
    . DIRECTORY_SEPARATOR . \"uploads\" ) . DIRECTORY_SEPARATOR;\n$PHPCONFIGPath       =
    realpath( getcwd() . DIRECTORY_SEPARATOR . DVWA_WEB_PAGE_TO_ROOT . \"config\");\n\n\n$phpDisplayErrors
    = 'PHP function display_errors: <span class=\"' . ( ini_get( 'display_errors'
    ) ? 'success\">Enabled' : 'failure\">Disabled' ) . '</span>';                                                  //
    Verbose error messages (e.g. full path disclosure)\n$phpDisplayStartupErrors =
    'PHP function display_startup_errors: <span class=\"' . ( ini_get( 'display_startup_errors'
    ) ? 'success\">Enabled' : 'failure\">Disabled' ) . '</span>';                                                  //
    Verbose error messages (e.g. full path disclosure)\n$phpDisplayErrors = 'PHP function
    display_errors: <span class=\"' . ( ini_get( 'display_errors' ) ? 'success\">Enabled'
    : 'failure\">Disabled' ) . '</span>';                                                  //
    Verbose error messages (e.g. full path disclosure)\n$phpURLInclude    = 'PHP function
    allow_url_include: <span class=\"' . ( ini_get( 'allow_url_include' ) ? 'success\">Enabled'
    : 'failure\">Disabled' ) . '</span>';                                   // RFI\n$phpURLFopen
    \     = 'PHP function allow_url_fopen: <span class=\"' . ( ini_get( 'allow_url_fopen'
    ) ? 'success\">Enabled' : 'failure\">Disabled' ) . '</span>';                                       //
    RFI\n$phpGD            = 'PHP module gd: <span class=\"' . ( ( extension_loaded(
    'gd' ) && function_exists( 'gd_info' ) ) ? 'success\">Installed' : 'failure\">Missing
    - Only an issue if you want to play with captchas' ) . '</span>';                    //
    File Upload\n$phpMySQL         = 'PHP module mysql: <span class=\"' . ( ( extension_loaded(
    'mysqli' ) && function_exists( 'mysqli_query' ) ) ? 'success\">Installed' : 'failure\">Missing'
    ) . '</span>';                // Core DVWA\n$phpPDO           = 'PHP module pdo_mysql:
    <span class=\"' . ( extension_loaded( 'pdo_mysql' ) ? 'success\">Installed' :
    'failure\">Missing' ) . '</span>';                // SQLi\n$DVWARecaptcha    =
    'reCAPTCHA key: <span class=\"' . ( ( isset( $_DVWA[ 'recaptcha_public_key' ]
    ) && $_DVWA[ 'recaptcha_public_key' ] != '' ) ? 'success\">' . $_DVWA[ 'recaptcha_public_key'
    ] : 'failure\">Missing' ) . '</span>';\n\n$DVWAUploadsWrite = 'Writable folder
    ' . $PHPUploadPath . ': <span class=\"' . ( is_writable( $PHPUploadPath ) ? 'success\">Yes'
    : 'failure\">No' ) . '</span>';                                     // File Upload\n$bakWritable
    = 'Writable folder ' . $PHPCONFIGPath . ': <span class=\"' . ( is_writable( $PHPCONFIGPath
    ) ? 'success\">Yes' : 'failure\">No' ) . '</span>';   // config.php.bak check
    \                                 // File Upload\n\n$DVWAOS           = 'Operating
    system: <em>' . ( strtoupper( substr (PHP_OS, 0, 3)) === 'WIN' ? 'Windows' : '*nix'
    ) . '</em>';\n$SERVER_NAME      = 'Web Server SERVER_NAME: <em>' . $_SERVER[ 'SERVER_NAME'
    ] . '</em>';                                                                                                          //
    CSRF\n\n$MYSQL_USER       = 'Database username: <em>' . $_DVWA[ 'db_user' ] .
    '</em>';\n$MYSQL_PASS       = 'Database password: <em>' . ( ($_DVWA[ 'db_password'
    ] != \"\" ) ? '******' : '*blank*' ) . '</em>';\n$MYSQL_DB         = 'Database
    database: <em>' . $_DVWA[ 'db_database' ] . '</em>';\n$MYSQL_SERVER     = 'Database
    host: <em>' . $_DVWA[ 'db_server' ] . '</em>';\n$MYSQL_PORT       = 'Database
    port: <em>' . $_DVWA[ 'db_port' ] . '</em>';\n// -- END (Setup Functions)\n\n?>\n"
kind: ConfigMap
metadata:
  name: config
  namespace: default
